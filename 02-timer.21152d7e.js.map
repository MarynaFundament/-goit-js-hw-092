{"mappings":"AAAA,MAAMA,EAAUC,SAASC,cAAc,oBACjCC,EAAWF,SAASC,cAAc,gBACxCE,QAAQC,IAAIF,GACZ,MAAMG,EAAWL,SAASC,cAAc,eAClCK,EAAYN,SAASC,cAAc,gBACnCM,EAAcP,SAASC,cAAc,kBACrCO,EAAcR,SAASC,cAAc,kBAK3C,IAAIQ,EADJP,EAASQ,UAAW,EAGpB,MAAMC,EAAU,CACZC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EACjBC,QAAQC,GACNf,QAAQC,IAAIc,EAAc,IAE1BT,EAAaS,EAAc,GAC3B,MAAMC,EAAc,IAAIJ,KAEpBN,EAAaU,EACfC,MAAM,sCAIJX,EAAaU,IACfjB,EAASQ,UAAW,E,GAK1BW,UAAUtB,EAASY,GAkErB,MAAMW,EAAQ,IAhEd,MAMIC,QACIC,KAAKC,WAAaC,aAAY,KAC5B,MAAMC,EAAc,IAAIZ,KAClBa,EAAYnB,EAAakB,EAE/B,GAAIC,GAAa,EAGf,OAFAJ,KAAKK,OAAO,CAAEC,KAAM,KAAMC,MAAO,KAAMC,QAAS,KAAMC,QAAS,YAC/DC,cAAcV,KAAKC,YAKrB,MAAMK,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,GAAYT,KAAKW,UAAUP,GACzDJ,KAAKK,OAAO,C,KAAEC,E,MAAMC,E,QAAOC,E,QAASC,GAAW,GAC9C,I,CAmBJE,UAAUC,GAET,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAWZ,MAAO,C,KARMf,KAAKiB,IAAIC,KAAKC,MAAMP,EAAKI,I,MAExBhB,KAAKiB,IAAIC,KAAKC,MAAMP,EAAMI,EAAOD,I,QAE/Bf,KAAKiB,IAAIC,KAAKC,MAAMP,EAAOI,EAAOD,EAAQF,I,QAE1Cb,KAAKiB,IAAIC,KAAKC,MAAMP,EAAQI,EAAOD,EAAQF,EAZ5C,M,CAkBlBI,IAAIG,GACD,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CA3DrCC,aAAYlB,OAACA,IACTL,KAAKC,WAAa,KAClBD,KAAKK,OAASA,C,GA6DE,CACpBA,OAWJ,UAAyBC,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IAC/C5B,EAAS2C,YAAc,GAAGlB,IAC1BxB,EAAU0C,YAAc,GAAGjB,IAC3BxB,EAAYyC,YAAc,GAAGhB,IAC7BxB,EAAYwC,YAAc,GAAGf,G,IAX/B/B,EAAS+C,iBAAiB,SAAS,KACjC3B,EAAMC,OAAO","sources":["src/js/02-timer.js"],"sourcesContent":["const myInput = document.querySelector(\"#datetime-picker\");\nconst startBtn = document.querySelector(\"[data-start]\");\nconsole.log(startBtn);\nconst dataDays = document.querySelector(\"[data-days]\");\nconst dataHours = document.querySelector(\"[data-hours]\");\nconst dataMinutes = document.querySelector(\"[data-minutes]\");\nconst dataSeconds = document.querySelector(\"[data-seconds]\");\n\n\n\nstartBtn.disabled = true;\nlet chosenData;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      console.log(selectedDates[0]);\n  \n      chosenData = selectedDates[0];\n      const currentDate = new Date();\n  \n      if (chosenData < currentDate) {\n        alert(\"Please choose a date in the future\");\n        return;\n      }\n  \n      if (chosenData > currentDate) {\n        startBtn.disabled = false\n    }\n   }\n  };\n  \n  flatpickr(myInput, options);\n\nclass Timer{\n    constructor({onTick}){\n        this.intervalId = null \n        this.onTick = onTick;\n    }\n\n    start() {\n        this.intervalId = setInterval(() => {\n          const currentTime = new Date();\n          const deltaTime = chosenData - currentTime;\n\n          if (deltaTime <= 0) {\n            this.onTick({ days: \"00\", hours: \"00\", minutes: \"00\", seconds: \"00\" });\n            clearInterval(this.intervalId);\n            return;\n          }\n\n          \n          const { days, hours, minutes, seconds } = this.convertMs(deltaTime);\n          this.onTick({ days, hours, minutes, seconds } )\n        }, 1000);\n\n        \n\n      }\n\n      \n\n    //   if(deltaTime < = 0){\n    //     clearInterval(this.intervalId )\n    //     return \n    //   }\n    \n    \n    // stop(){\n    //     clearInterval(this.intervalId)\n    //   }\n\n\n       convertMs(ms) {\n        // Number of milliseconds per unit of time\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n      \n        // Remaining days\n        const days = this.pad(Math.floor(ms / day));\n        // Remaining hours\n        const hours = this.pad(Math.floor((ms % day) / hour));\n        // Remaining minutes\n        const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n        // Remaining seconds\n        const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n      \n        return { days, hours, minutes, seconds };\n      }\n\n\n     pad(value) {\n        return String(value).padStart(2, \"0\");\n      }\n}\n\nconst timer = new Timer({\n    onTick:updateClockface\n    \n});\n\nstartBtn.addEventListener(`click`, () => {\n  timer.start();\n  \n});\n\n\n\nfunction updateClockface({ days, hours, minutes, seconds }) {\n  dataDays.textContent = `${days}`;\n  dataHours.textContent = `${hours}`;\n  dataMinutes.textContent = `${minutes}`;\n  dataSeconds.textContent = `${seconds}`;\n}\n\n\n\n"],"names":["$40d383fb392a7037$var$myInput","document","querySelector","$40d383fb392a7037$var$startBtn","console","log","$40d383fb392a7037$var$dataDays","$40d383fb392a7037$var$dataHours","$40d383fb392a7037$var$dataMinutes","$40d383fb392a7037$var$dataSeconds","$40d383fb392a7037$var$chosenData","disabled","$40d383fb392a7037$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","currentDate","alert","flatpickr","$40d383fb392a7037$var$timer","start","this","intervalId","setInterval","currentTime","deltaTime","onTick","days","hours","minutes","seconds","clearInterval","convertMs","ms","minute","second","hour","day","pad","Math","floor","value","String","padStart","constructor","textContent","addEventListener"],"version":3,"file":"02-timer.21152d7e.js.map"}